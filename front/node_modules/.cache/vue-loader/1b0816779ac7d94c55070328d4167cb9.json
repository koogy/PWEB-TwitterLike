{"remainingRequest":"/home/alex/pwoo/pweb-project/front/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/alex/pwoo/pweb-project/front/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/alex/pwoo/pweb-project/front/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/alex/pwoo/pweb-project/front/src/components/app/DisplayMessage.vue?vue&type=template&id=1c587343&","dependencies":[{"path":"/home/alex/pwoo/pweb-project/front/src/components/app/DisplayMessage.vue","mtime":1621784658714},{"path":"/home/alex/pwoo/pweb-project/front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alex/pwoo/pweb-project/front/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/alex/pwoo/pweb-project/front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alex/pwoo/pweb-project/front/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}